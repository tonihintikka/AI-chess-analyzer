# Test Commands for Chess Game Analyzer API

# Start the server
conda activate chess-analyzer
uvicorn main:app --reload

# Check API and OpenAI connection health
curl http://localhost:8000/health

# Simple one-line test command
curl -X POST http://localhost:8000/analyze -H "Content-Type: application/json" -d '{"pgn": "[Event \"Sample Game\"]\n[Site \"Chess Game Analyzer\"]\n[Date \"2024.03.20\"]\n[Round \"1\"]\n[White \"Player 1\"]\n[Black \"Player 2\"]\n[Result \"1-0\"]\n\n1. d4 d5 2. Nf3 Nc6 3. Bf4 Nf6 4. e3 Bf5 5. c4 e6 6. Nc3 Be7 7. c5 O-O 8. Bd3 Bxd3 9. Qxd3 Ne4 10. Nxe4 dxe4 11. Qxe4 f5 12. Qd3 Be6 13. O-O-O a5 14. h4 Qd7 15. g4 fxg4 16. Ng5 Bd5 17. Bxh7+ Kf8 18. Bg7 Be6 19. Qf8+ 1-0"}' | jq '.'

# Multi-line curl test (same as above, but more readable)
curl -X POST http://localhost:8000/analyze \
  -H "Content-Type: application/json" \
  -d '{"pgn": "[Event \"Sample Game\"]\n[Site \"Chess Game Analyzer\"]\n[Date \"2024.03.20\"]\n[Round \"1\"]\n[White \"Player 1\"]\n[Black \"Player 2\"]\n[Result \"1-0\"]\n\n1. d4 d5 2. Nf3 Nc6 3. Bf4 Nf6 4. e3 Bf5 5. c4 e6 6. Nc3 Be7 7. c5 O-O 8. Bd3 Bxd3 9. Qxd3 Ne4 10. Nxe4 dxe4 11. Qxe4 f5 12. Qd3 Be6 13. O-O-O a5 14. h4 Qd7 15. g4 fxg4 16. Ng5 Bd5 17. Bxh7+ Kf8 18. Bg7 Be6 19. Qf8+ 1-0"}' | jq '.'

# Python test script example
'''python
import requests

# Check health
health_response = requests.get('http://localhost:8000/health')
print("Health check:", health_response.json())

# Analyze game
url = 'http://localhost:8000/analyze'
pgn_text = """[Event "Sample Game"]
[Site "Chess Game Analyzer"]
[Date "2024.03.20"]
[Round "1"]
[White "Player 1"]
[Black "Player 2"]
[Result "1-0"]

1. d4 d5 2. Nf3 Nc6 3. Bf4 Nf6 4. e3 Bf5 5. c4 e6 6. Nc3 Be7 7. c5 O-O 8. Bd3 Bxd3 9. Qxd3 Ne4 10. Nxe4 dxe4 11. Qxe4 f5 12. Qd3 Be6 13. O-O-O a5 14. h4 Qd7 15. g4 fxg4 16. Ng5 Bd5 17. Bxh7+ Kf8 18. Bg7 Be6 19. Qf8+ 1-0"""

response = requests.post(url, json={"pgn": pgn_text})
analysis = response.json()
print(analysis)
'''

# Web Interface
# Open in browser: http://localhost:8000/docs
# This provides an interactive Swagger UI where you can:
# 1. See the API documentation
# 2. Test the endpoint directly
# 3. View request/response schemas

# Note: Make sure the server is running and .env file contains valid OpenAI API key
# before running any of these commands. 